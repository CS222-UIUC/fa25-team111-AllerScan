package com.example.allerscan


import okhttp3.OkHttpClient
import okhttp3.Request
import kotlin.collections.MutableList
import java.util.Base64
import org.json.JSONObject
import android.util.Log
import okhttp3.Callback
import okhttp3.Call
import java.io.IOException
import okhttp3.Response

//Given the Barcode of a Product
class BarcodeIngredientLookup {
    //fetches ingredients and returns them in a list
    fun lookup(barcode: String): MutableList<String> {
        Log.e("BarcodeIngredientLookup", "Barcode: $barcode")
        println("Barcode: $barcode")
        var ingredients: String = ""

//        val ingredient = BarcodeIngredientLookup()
//        test.lookupOpenFoodFacts("044000047009") { ingredients ->
//            if (ingredients.isNotEmpty()) {
//                Log.d("MainActivity", "Got ingredients: $ingredients")
//            } else {
//                Log.e("MainActivity", "No ingredients found or request failed")
//            }
//        }

        //Lookup attempt with APIs
        //Open Food Facts
        //ingredients = lookupOpenFoodFacts(barcode)
        //Go-UPC
        if (ingredients.isEmpty())
            ingredients = lookupGoUPC(barcode)
        //UPCindex
        if (ingredients.isEmpty())
            ingredients = lookupUPCIndex(barcode)


        //check if empty
        if (ingredients.isEmpty())
            Log.e("BarcodeIngredientLookup", "No Ingredients Found")
        //Parsing of all ingredients
        //lowercase all ingredients incase of case sensitive




        val ingredientList = mutableListOf<String>()
        return ingredientList;
    }


    fun parseIngredients(ingredients: String) {


    }


    //attempt to fetch ingredients using OpenFoodFacts API
    fun lookupOpenFoodFacts(barcode: String, callback: (String) -> Unit) {
        //https://openfoodfacts.github.io/openfoodfacts-server/api/
        //The code below in generated by ChatGPT in Kotlin using a JavaScript example from the Open Food Facts Documentation
        //The code has been edited to work in for the specific function
        //Check Logcat for more info
        //var ingredients = ""
        val client = OkHttpClient()
        val credentials = "off:off"
        val auth = "Basic " + Base64.getEncoder().encodeToString(credentials.toByteArray())
        val url =
            "https://world.openfoodfacts.net/api/v2/product/$barcode.json?fields=ingredients_text"
        val request = Request.Builder()
            .url(url)
            .addHeader("Authorization", auth)
            .build()
        //asynchronous request
        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                Log.e("BarcodeLookup", "Request failed", e)
                callback("")
            }
            override fun onResponse(call: Call, response: Response) {
                response.use {
                    try {
                        if (!response.isSuccessful) {
                            Log.e("BarcodeLookup", "Request failed: ${response.code}")
                            return
                        }
                        val bodyString = response.body?.string()
                        if (bodyString == null) {
                            Log.e("BarcodeLookup", "Response body is null")
                            return
                        }
                        Log.d("BarcodeLookup", "Response: $bodyString")
                        val json = JSONObject(bodyString)
                        if (!json.has("product")) {
                            Log.e("BarcodeLookup", "No product field found in JSON")
                            return
                        }
                        val product = json.getJSONObject("product")
                        val ingredients = product.optString("ingredients_text", "")
                        Log.d("BarcodeLookup", "Ingredients for barcode $barcode: $ingredients")

                        //calls callback currently in MainActivity
                        callback(ingredients)
                    } catch (e: Exception) {
                        Log.e("BarcodeLookup", "Exception while fetching ingredients", e)
                    }
                } //response closed here = response.close();
            }
        })
        //return ingredients in callback
    }

    //Add additional APIs below
    fun lookupGoUPC(barcode: String): String {
        //reference in python: https://go-upc.com/docs/python-barcode-api-lookup
        //not free API :(
        return ""
    }
    fun lookupUPCIndex(barcode: String): String {
        //https://www.upcindex.com/
        //https://devs.upcitemdb.com/ has free API
        return ""
    }
}


fun main() {
    //Create Tests For the Barcode
    //Use oreo UPC code: 044000047009
    //val lookupBarcode = BarcodeIngredientLookup()
    //val barcode = "044000047009"
    //val ingredients = lookupBarcode.lookupOpenFoodFacts(barcode);
    //expected result
    //"unbleached enriched flour (wheat flour, niacin, reduced iron, thiamine mononitrate {vitamin b1}, riboflavin {vitamin b2}, folic acid), sugar, palm and/or canola oil, cocoa (processed with alkali), high fructose corn syrup, leavening (baking soda and/or calcium phosphate), salt, soy lecithin, chocolate, artificial flavor,"
}
