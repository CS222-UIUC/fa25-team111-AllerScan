package com.example.allerscan


import okhttp3.OkHttpClient
import okhttp3.Request
import kotlin.collections.MutableList
import java.util.Base64
import org.json.JSONObject
import android.util.Log
import okhttp3.Callback
import okhttp3.Call
import java.io.IOException
import okhttp3.Response

//Given the Barcode of a Product
class BarcodeIngredientLookup {
    //fetches ingredients and returns them in a list
    fun lookup(barcode: String): MutableList<String> {
        Log.e("BarcodeIngredientLookup", "Barcode: $barcode")
        println("Barcode: $barcode")
        var ingredients: String = ""


        //Lookup attempt with APIs
        //Open Food Facts
        ingredients = lookupOpenFoodFacts(barcode)
        //Go-UPC
        if (ingredients.isEmpty())
            ingredients = lookupGoUPC(barcode)
        //UPCindex
        if (ingredients.isEmpty())
            ingredients = lookupUPCIndex(barcode)


        //check if empty
        if (ingredients.isEmpty())
            Log.e("BarcodeIngredientLookup", "No Ingredients Found")
        //Parsing of all ingredients
        //lowercase all ingredients incase of case sensitive




        val ingredientList = mutableListOf<String>()
        return ingredientList;
    }


    fun parseIngredients(ingredients: String) {


    }


    fun lookupOpenFoodFacts(barcode: String): String {
        //https://openfoodfacts.github.io/openfoodfacts-server/api/
        //The code below in generated by ChatGPT in Kotlin using a JavaScript example from the Open Food Facts Documentation
        //The code has been edited to fit the function
        var ingredients = ""
        val client = OkHttpClient()
        val credentials = "off:off"
        val auth = "Basic " + Base64.getEncoder().encodeToString(credentials.toByteArray())
        val url =
            "https://world.openfoodfacts.net/api/v2/product/$barcode.json?fields=ingredients_text"
        val request = Request.Builder()
            .url(url)
            .addHeader("Authorization", auth)
            .build()
        val response = client.newCall(request).execute();


        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                Log.e("API", "Request failed", e)
            }


            override fun onResponse(call: Call, response: Response) {
                val body = response.body?.string()
                Log.d("API", "Response: $body")
                try {
                    // Check if response was successful
                    if (!response.isSuccessful) {
                        //println("Request failed: " + response.code)
                        Log.e("BarcodeLookup", "Request failed")
                        //return ""
                    }
                    val responseBody = response.body
                    if (responseBody == null) {
                        //println("Response body is null")
                        Log.e("BarcodeLookup", "Response body is null")
                        return
                    }
                    val bodyString = responseBody.string()


                    if (responseBody == null) {
                        Log.e("BarcodeLookup", "Body is null")
                        return
                    }
                    val json = JSONObject(bodyString)
                    // Make sure "product" exists in JSON
                    if (!json.has("product")) {
                        //println("No product field found")
                        Log.e("BarcodeLookup", "No product field found in JSON")
                        //return ""
                        return
                    }
                    val product = json.getJSONObject("product")
                    // Make sure "ingredients_text" exists
                    val ingredients: String
                    if (product.has("ingredients_text")) {
                        ingredients = product.getString("ingredients_text")
                        Log.d("BarcodeLookup", "Ingredients for barcode $barcode: $ingredients")
                    } else {
                        ingredients = ""
                    }
                    //println("Ingredients: " + ingredients)


                } catch (e: Exception) {
                    Log.e("BarcodeLookup", "Exception while fetching ingredients", e)


                } finally {
                    response.close();
                }
            }

        })

        return ingredients
    }


    fun lookupGoUPC(barcode: String): String {
        //reference in python: https://go-upc.com/docs/python-barcode-api-lookup
        //not free API
        return ""
    }


    fun lookupUPCIndex(barcode: String): String {
        //https://www.upcindex.com/

        return ""
    }
}


fun main() {
    //Create Tests For the Barcode
    //Use oreo UPC code: 044000047009
//    val lookupBarcode = BarcodeIngredientLookup()
//    val barcode = "044000047009"
//    val ingredients = lookupBarcode.lookupOpenFoodFacts(barcode);
//    println("Ingredients: ")
//    println(ingredients)
}
